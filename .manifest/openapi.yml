openapi: 3.1.0
info:
  title: portfolio
  version: 1.0.0
servers:
  - url: http://localhost:1111/api
    description: Development server
paths:
  /collections/projects:
    post:
      summary: Create a new project
      description: >-
        Creates a new project passing the properties in the request body as
        JSON.
      tags:
        - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateProjectDto'
      security:
        - Admin: []
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
                  error:
                    type: string
                    example: Bad Request
                  statusCode:
                    type: integer
                    example: 400
    get:
      summary: List projects
      description: >-
        Retrieves a paginated list of projects. In addition to the general
        parameters below, each property of the project can be used as a filter:
        https://manifest.build/docs/crud#get-a-list-of-items
      tags:
        - Projects
      security: []
      parameters:
        - name: page
          in: query
          description: The page number
          required: false
          schema:
            type: integer
            default: 1
        - name: perPage
          in: query
          description: The number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: orderBy
          in: query
          description: The field to order by
          required: false
          schema:
            type: string
            enum:
              - name
              - code_url
              - demo_url
              - start_date
              - end_date
              - current
              - stack
              - highlights
        - name: order
          in: query
          description: The order direction
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: relations
          in: query
          description: >-
            The relations to include. For several relations, use a
            comma-separated list
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: []
        - name: name_eq
          in: query
          description: Get projects where name equals the specified value
          required: false
          schema:
            type: string
        - name: name_neq
          in: query
          description: Get projects where name does not equal the specified value
          required: false
          schema:
            type: string
        - name: name_like
          in: query
          description: >-
            Get projects where name contains or matches the specified pattern
            (use % for wildcards)
          required: false
          schema:
            type: string
        - name: name_in
          in: query
          description: >-
            Get projects where name is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: code_url_eq
          in: query
          description: Get projects where code_url equals the specified value
          required: false
          schema:
            type: string
        - name: code_url_neq
          in: query
          description: Get projects where code_url does not equal the specified value
          required: false
          schema:
            type: string
        - name: code_url_like
          in: query
          description: >-
            Get projects where code_url contains or matches the specified
            pattern (use % for wildcards)
          required: false
          schema:
            type: string
        - name: code_url_in
          in: query
          description: >-
            Get projects where code_url is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: demo_url_eq
          in: query
          description: Get projects where demo_url equals the specified value
          required: false
          schema:
            type: string
        - name: demo_url_neq
          in: query
          description: Get projects where demo_url does not equal the specified value
          required: false
          schema:
            type: string
        - name: demo_url_like
          in: query
          description: >-
            Get projects where demo_url contains or matches the specified
            pattern (use % for wildcards)
          required: false
          schema:
            type: string
        - name: demo_url_in
          in: query
          description: >-
            Get projects where demo_url is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: start_date_eq
          in: query
          description: Get projects where start_date equals the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: start_date_neq
          in: query
          description: Get projects where start_date does not equal the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: start_date_gt
          in: query
          description: Get projects where start_date is greater than the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: start_date_gte
          in: query
          description: >-
            Get projects where start_date is greater than or equal to the
            specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: start_date_lt
          in: query
          description: Get projects where start_date is less than the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: start_date_lte
          in: query
          description: >-
            Get projects where start_date is less than or equal to the specified
            value
          required: false
          schema:
            type: string
            format: date-time
        - name: start_date_in
          in: query
          description: >-
            Get projects where start_date is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: end_date_eq
          in: query
          description: Get projects where end_date equals the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date_neq
          in: query
          description: Get projects where end_date does not equal the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date_gt
          in: query
          description: Get projects where end_date is greater than the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date_gte
          in: query
          description: >-
            Get projects where end_date is greater than or equal to the
            specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date_lt
          in: query
          description: Get projects where end_date is less than the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date_lte
          in: query
          description: >-
            Get projects where end_date is less than or equal to the specified
            value
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date_in
          in: query
          description: >-
            Get projects where end_date is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: current_eq
          in: query
          description: Get projects where current equals the specified value
          required: false
          schema:
            type: boolean
        - name: current_neq
          in: query
          description: Get projects where current does not equal the specified value
          required: false
          schema:
            type: boolean
        - name: stack_eq
          in: query
          description: Get projects where stack equals the specified value
          required: false
          schema:
            type: string
        - name: stack_neq
          in: query
          description: Get projects where stack does not equal the specified value
          required: false
          schema:
            type: string
        - name: stack_like
          in: query
          description: >-
            Get projects where stack contains or matches the specified pattern
            (use % for wildcards)
          required: false
          schema:
            type: string
        - name: stack_in
          in: query
          description: >-
            Get projects where stack is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: highlights_eq
          in: query
          description: Get projects where highlights equals the specified value
          required: false
          schema:
            type: string
        - name: highlights_neq
          in: query
          description: Get projects where highlights does not equal the specified value
          required: false
          schema:
            type: string
        - name: highlights_like
          in: query
          description: >-
            Get projects where highlights contains or matches the specified
            pattern (use % for wildcards)
          required: false
          schema:
            type: string
        - name: highlights_in
          in: query
          description: >-
            Get projects where highlights is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paginator'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Project'
  /collections/projects/{id}:
    get:
      summary: Get a single project
      description: Retrieves the details of a single project by its ID.
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          description: The ID of the project
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
        - name: relations
          in: query
          description: >-
            The relations to include. For several relations, use a
            comma-separated list
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: []
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: The project was not found
    put:
      summary: Update an existing project (full replace)
      description: >-
        Updates a single project by its ID. The properties to update are passed
        in the request body as JSON. This operation fully replaces the entity
        and its relations. Leaving a property out will remove it.
      tags:
        - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateProjectDto'
      parameters:
        - name: id
          in: path
          description: The ID of the project
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Item not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
    patch:
      summary: Update an existing project (partial update)
      description: >-
        Updates a single project by its ID. The properties to update are passed
        in the request body as JSON. This operation partially updates the entity
        and its relations. Leaving a property out will not remove it.
      tags:
        - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateProjectDto'
      parameters:
        - name: id
          in: path
          description: The ID of the project
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Item not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
    delete:
      summary: Delete an existing project
      description: Deletes a single project by its ID.
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          description: The ID of the project
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: The project was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
  /collections/projects/select-options:
    get:
      summary: List projects for select options (admin panel)
      description: >-
        Retrieves a list of projects for select options. The response is an
        array of objects with the properties 'id' and 'label'. Used in the admin
        panel to fill select dropdowns.
      tags:
        - Projects
      security:
        - Admin: []
      responses:
        '200':
          description: List of projects for select options
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SelectOption'
  /collections/experience-groups:
    post:
      summary: Create a new experienceGroup
      description: >-
        Creates a new experienceGroup passing the properties in the request body
        as JSON.
      tags:
        - ExperienceGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateExperienceGroupDto'
      security:
        - Admin: []
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceGroup'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
                  error:
                    type: string
                    example: Bad Request
                  statusCode:
                    type: integer
                    example: 400
    get:
      summary: List experienceGroups
      description: >-
        Retrieves a paginated list of experienceGroups. In addition to the
        general parameters below, each property of the experienceGroup can be
        used as a filter: https://manifest.build/docs/crud#get-a-list-of-items
      tags:
        - ExperienceGroups
      security: []
      parameters:
        - name: page
          in: query
          description: The page number
          required: false
          schema:
            type: integer
            default: 1
        - name: perPage
          in: query
          description: The number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: orderBy
          in: query
          description: The field to order by
          required: false
          schema:
            type: string
            enum:
              - name
              - description
        - name: order
          in: query
          description: The order direction
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: relations
          in: query
          description: >-
            The relations to include. For several relations, use a
            comma-separated list
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - experiences
        - name: name_eq
          in: query
          description: Get experienceGroups where name equals the specified value
          required: false
          schema:
            type: string
        - name: name_neq
          in: query
          description: Get experienceGroups where name does not equal the specified value
          required: false
          schema:
            type: string
        - name: name_like
          in: query
          description: >-
            Get experienceGroups where name contains or matches the specified
            pattern (use % for wildcards)
          required: false
          schema:
            type: string
        - name: name_in
          in: query
          description: >-
            Get experienceGroups where name is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: description_eq
          in: query
          description: Get experienceGroups where description equals the specified value
          required: false
          schema:
            type: string
        - name: description_neq
          in: query
          description: >-
            Get experienceGroups where description does not equal the specified
            value
          required: false
          schema:
            type: string
        - name: description_like
          in: query
          description: >-
            Get experienceGroups where description contains or matches the
            specified pattern (use % for wildcards)
          required: false
          schema:
            type: string
        - name: description_in
          in: query
          description: >-
            Get experienceGroups where description is one of the specified
            values (comma-separated)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paginator'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ExperienceGroup'
  /collections/experience-groups/{id}:
    get:
      summary: Get a single experienceGroup
      description: Retrieves the details of a single experienceGroup by its ID.
      tags:
        - ExperienceGroups
      parameters:
        - name: id
          in: path
          description: The ID of the experienceGroup
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
        - name: relations
          in: query
          description: >-
            The relations to include. For several relations, use a
            comma-separated list
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - experiences
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceGroup'
        '404':
          description: The experienceGroup was not found
    put:
      summary: Update an existing experienceGroup (full replace)
      description: >-
        Updates a single experienceGroup by its ID. The properties to update are
        passed in the request body as JSON. This operation fully replaces the
        entity and its relations. Leaving a property out will remove it.
      tags:
        - ExperienceGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateExperienceGroupDto'
      parameters:
        - name: id
          in: path
          description: The ID of the experienceGroup
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceGroup'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Item not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
    patch:
      summary: Update an existing experienceGroup (partial update)
      description: >-
        Updates a single experienceGroup by its ID. The properties to update are
        passed in the request body as JSON. This operation partially updates the
        entity and its relations. Leaving a property out will not remove it.
      tags:
        - ExperienceGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateExperienceGroupDto'
      parameters:
        - name: id
          in: path
          description: The ID of the experienceGroup
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceGroup'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Item not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
    delete:
      summary: Delete an existing experienceGroup
      description: Deletes a single experienceGroup by its ID.
      tags:
        - ExperienceGroups
      parameters:
        - name: id
          in: path
          description: The ID of the experienceGroup
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceGroup'
        '404':
          description: The experienceGroup was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
  /collections/experience-groups/select-options:
    get:
      summary: List experienceGroups for select options (admin panel)
      description: >-
        Retrieves a list of experienceGroups for select options. The response is
        an array of objects with the properties 'id' and 'label'. Used in the
        admin panel to fill select dropdowns.
      tags:
        - ExperienceGroups
      security:
        - Admin: []
      responses:
        '200':
          description: List of experienceGroups for select options
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SelectOption'
  /collections/experiences:
    post:
      summary: Create a new experience
      description: >-
        Creates a new experience passing the properties in the request body as
        JSON.
      tags:
        - Experiences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateExperienceDto'
      security:
        - Admin: []
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
                  error:
                    type: string
                    example: Bad Request
                  statusCode:
                    type: integer
                    example: 400
    get:
      summary: List experiences
      description: >-
        Retrieves a paginated list of experiences. In addition to the general
        parameters below, each property of the experience can be used as a
        filter: https://manifest.build/docs/crud#get-a-list-of-items
      tags:
        - Experiences
      security: []
      parameters:
        - name: page
          in: query
          description: The page number
          required: false
          schema:
            type: integer
            default: 1
        - name: perPage
          in: query
          description: The number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: orderBy
          in: query
          description: The field to order by
          required: false
          schema:
            type: string
            enum:
              - company
              - title
              - start_date
              - end_date
              - current
              - description
              - skills
        - name: order
          in: query
          description: The order direction
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: relations
          in: query
          description: >-
            The relations to include. For several relations, use a
            comma-separated list
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - group
        - name: company_eq
          in: query
          description: Get experiences where company equals the specified value
          required: false
          schema:
            type: string
        - name: company_neq
          in: query
          description: Get experiences where company does not equal the specified value
          required: false
          schema:
            type: string
        - name: company_like
          in: query
          description: >-
            Get experiences where company contains or matches the specified
            pattern (use % for wildcards)
          required: false
          schema:
            type: string
        - name: company_in
          in: query
          description: >-
            Get experiences where company is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: title_eq
          in: query
          description: Get experiences where title equals the specified value
          required: false
          schema:
            type: string
        - name: title_neq
          in: query
          description: Get experiences where title does not equal the specified value
          required: false
          schema:
            type: string
        - name: title_like
          in: query
          description: >-
            Get experiences where title contains or matches the specified
            pattern (use % for wildcards)
          required: false
          schema:
            type: string
        - name: title_in
          in: query
          description: >-
            Get experiences where title is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: start_date_eq
          in: query
          description: Get experiences where start_date equals the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: start_date_neq
          in: query
          description: Get experiences where start_date does not equal the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: start_date_gt
          in: query
          description: Get experiences where start_date is greater than the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: start_date_gte
          in: query
          description: >-
            Get experiences where start_date is greater than or equal to the
            specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: start_date_lt
          in: query
          description: Get experiences where start_date is less than the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: start_date_lte
          in: query
          description: >-
            Get experiences where start_date is less than or equal to the
            specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: start_date_in
          in: query
          description: >-
            Get experiences where start_date is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: end_date_eq
          in: query
          description: Get experiences where end_date equals the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date_neq
          in: query
          description: Get experiences where end_date does not equal the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date_gt
          in: query
          description: Get experiences where end_date is greater than the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date_gte
          in: query
          description: >-
            Get experiences where end_date is greater than or equal to the
            specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date_lt
          in: query
          description: Get experiences where end_date is less than the specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date_lte
          in: query
          description: >-
            Get experiences where end_date is less than or equal to the
            specified value
          required: false
          schema:
            type: string
            format: date-time
        - name: end_date_in
          in: query
          description: >-
            Get experiences where end_date is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: current_eq
          in: query
          description: Get experiences where current equals the specified value
          required: false
          schema:
            type: boolean
        - name: current_neq
          in: query
          description: Get experiences where current does not equal the specified value
          required: false
          schema:
            type: boolean
        - name: description_eq
          in: query
          description: Get experiences where description equals the specified value
          required: false
          schema:
            type: string
        - name: description_neq
          in: query
          description: Get experiences where description does not equal the specified value
          required: false
          schema:
            type: string
        - name: description_like
          in: query
          description: >-
            Get experiences where description contains or matches the specified
            pattern (use % for wildcards)
          required: false
          schema:
            type: string
        - name: description_in
          in: query
          description: >-
            Get experiences where description is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: skills_eq
          in: query
          description: Get experiences where skills equals the specified value
          required: false
          schema:
            type: string
        - name: skills_neq
          in: query
          description: Get experiences where skills does not equal the specified value
          required: false
          schema:
            type: string
        - name: skills_like
          in: query
          description: >-
            Get experiences where skills contains or matches the specified
            pattern (use % for wildcards)
          required: false
          schema:
            type: string
        - name: skills_in
          in: query
          description: >-
            Get experiences where skills is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paginator'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Experience'
  /collections/experiences/{id}:
    get:
      summary: Get a single experience
      description: Retrieves the details of a single experience by its ID.
      tags:
        - Experiences
      parameters:
        - name: id
          in: path
          description: The ID of the experience
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
        - name: relations
          in: query
          description: >-
            The relations to include. For several relations, use a
            comma-separated list
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - group
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
        '404':
          description: The experience was not found
    put:
      summary: Update an existing experience (full replace)
      description: >-
        Updates a single experience by its ID. The properties to update are
        passed in the request body as JSON. This operation fully replaces the
        entity and its relations. Leaving a property out will remove it.
      tags:
        - Experiences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateExperienceDto'
      parameters:
        - name: id
          in: path
          description: The ID of the experience
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Item not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
    patch:
      summary: Update an existing experience (partial update)
      description: >-
        Updates a single experience by its ID. The properties to update are
        passed in the request body as JSON. This operation partially updates the
        entity and its relations. Leaving a property out will not remove it.
      tags:
        - Experiences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateExperienceDto'
      parameters:
        - name: id
          in: path
          description: The ID of the experience
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Item not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
    delete:
      summary: Delete an existing experience
      description: Deletes a single experience by its ID.
      tags:
        - Experiences
      parameters:
        - name: id
          in: path
          description: The ID of the experience
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
        '404':
          description: The experience was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
  /collections/experiences/select-options:
    get:
      summary: List experiences for select options (admin panel)
      description: >-
        Retrieves a list of experiences for select options. The response is an
        array of objects with the properties 'id' and 'label'. Used in the admin
        panel to fill select dropdowns.
      tags:
        - Experiences
      security:
        - Admin: []
      responses:
        '200':
          description: List of experiences for select options
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SelectOption'
  /singles/home:
    get:
      summary: Get a single homePage
      description: Retrieves the details of a single homePage by its ID.
      tags:
        - HomePage
      parameters: []
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomePage'
        '404':
          description: The homePage was not found
    patch:
      summary: Update an existing homePage (partial update)
      description: >-
        Updates a single homePage by its ID. The properties to update are passed
        in the request body as JSON. This operation partially updates the entity
        and its relations. Leaving a property out will not remove it.
      tags:
        - HomePage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateHomePageDto'
      parameters: []
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomePage'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Item not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
  /manifest:
    get:
      summary: Get the manifest
      description: Retrieves the manifest of the application.
      tags:
        - Manifest
      security:
        - Admin: []
      responses:
        '200':
          description: The manifest of the application.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppManifest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
                  statusCode:
                    type: number
              example:
                message: Forbidden resource
                error: Forbidden
                statusCode: 403
  /manifest/entities/projects:
    get:
      summary: Get the project manifest
      description: Retrieves the manifest of the project entity with all its properties.
      tags:
        - Manifest
      security:
        - Admin: []
      responses:
        '200':
          description: The manifest of the project entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityManifest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
                  statusCode:
                    type: number
              example:
                message: Forbidden resource
                error: Forbidden
                statusCode: 403
  /manifest/entities/experience-groups:
    get:
      summary: Get the experienceGroup manifest
      description: >-
        Retrieves the manifest of the experienceGroup entity with all its
        properties.
      tags:
        - Manifest
      security:
        - Admin: []
      responses:
        '200':
          description: The manifest of the experienceGroup entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityManifest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
                  statusCode:
                    type: number
              example:
                message: Forbidden resource
                error: Forbidden
                statusCode: 403
  /manifest/entities/experiences:
    get:
      summary: Get the experience manifest
      description: Retrieves the manifest of the experience entity with all its properties.
      tags:
        - Manifest
      security:
        - Admin: []
      responses:
        '200':
          description: The manifest of the experience entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityManifest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
                  statusCode:
                    type: number
              example:
                message: Forbidden resource
                error: Forbidden
                statusCode: 403
  /manifest/entities/home:
    get:
      summary: Get the homePage manifest
      description: Retrieves the manifest of the homePage entity with all its properties.
      tags:
        - Manifest
      security:
        - Admin: []
      responses:
        '200':
          description: The manifest of the homePage entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityManifest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
                  statusCode:
                    type: number
              example:
                message: Forbidden resource
                error: Forbidden
                statusCode: 403
  /auth/admins/login:
    post:
      summary: Login as a admin
      description: Logs in as a admin.
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
            example:
              email: example@manifest.build
              password: password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              example:
                token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20iLCJlbnRpdHlTbHVnIjoidHJhaW5lcnMiLCJpYXQiOjE3NTA4NjUyNjB9.8KRlyPPlNWvHDc_yaocqrqYBhAzAyn5PvyCKyvUUCM4
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                  message:
                    type: array
                    items:
                      type: string
                  error:
                    type: string
              example:
                message:
                  - password should not be empty
                statusCode: 400
                error: Bad Request
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                  message:
                    type: string
              example:
                message: Invalid email or password
                statusCode: 401
  /auth/admins/me:
    get:
      summary: Get current admin
      description: Get current admin.
      tags:
        - Auth
      security:
        - Admin: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                  message:
                    type: string
                  error:
                    type: string
              example:
                message: Forbidden resource
                error: Forbidden
                statusCode: 403
components:
  schemas:
    Project:
      type: object
      description: Project entity schema
      properties:
        id:
          type: string
          description: The unique identifier for the entity
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        name:
          type: string
          description: The name property of the entity (string)
          example: This is a simple string example.
          nullable: true
        code_url:
          type: string
          description: The code_url property of the entity (link)
          example: https://example.com
          format: uri
          nullable: true
        demo_url:
          type: string
          description: The demo_url property of the entity (link)
          example: https://example.com
          format: uri
          nullable: true
        start_date:
          type: string
          format: date
          description: The start_date property of the entity (date)
          example: '2024-01-15'
          nullable: true
        end_date:
          type: string
          format: date
          description: The end_date property of the entity (date)
          example: '2024-01-15'
          nullable: true
        current:
          type: boolean
          description: The current property of the entity (boolean)
          example: true
          nullable: true
        stack:
          type: string
          description: The stack property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        highlights:
          type: string
          description: The highlights property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
    ExperienceGroup:
      type: object
      description: ExperienceGroup entity schema
      properties:
        id:
          type: string
          description: The unique identifier for the entity
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        name:
          type: string
          description: The name property of the entity (string)
          example: This is a simple string example.
          nullable: true
        description:
          type: string
          description: The description property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        experiences:
          type: array
          description: Array of experiences entities
          items:
            $ref: '#/components/schemas/Experience'
    Experience:
      type: object
      description: Experience entity schema
      properties:
        id:
          type: string
          description: The unique identifier for the entity
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        company:
          type: string
          description: The company property of the entity (string)
          example: This is a simple string example.
          nullable: true
        title:
          type: string
          description: The title property of the entity (string)
          example: This is a simple string example.
          nullable: true
        start_date:
          type: string
          format: date
          description: The start_date property of the entity (date)
          example: '2024-01-15'
          nullable: true
        end_date:
          type: string
          format: date
          description: The end_date property of the entity (date)
          example: '2024-01-15'
          nullable: true
        current:
          type: boolean
          description: The current property of the entity (boolean)
          example: true
          nullable: true
        description:
          type: string
          description: The description property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        skills:
          type: string
          description: The skills property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        group:
          type: object
          description: Single group entity
          $ref: '#/components/schemas/ExperienceGroup'
    HomePage:
      type: object
      description: HomePage entity schema
      properties:
        id:
          type: string
          description: The unique identifier for the entity
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        languages:
          type: string
          description: The languages property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        frameworks:
          type: string
          description: The frameworks property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        databases:
          type: string
          description: The databases property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        devops:
          type: string
          description: The devops property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
    CreateUpdateProjectDto:
      type: object
      description: CreateUpdateProjectDto entity schema
      properties:
        name:
          type: string
          description: The name property of the entity (string)
          example: This is a simple string example.
          nullable: true
        code_url:
          type: string
          description: The code_url property of the entity (link)
          example: https://example.com
          format: uri
          nullable: true
        demo_url:
          type: string
          description: The demo_url property of the entity (link)
          example: https://example.com
          format: uri
          nullable: true
        start_date:
          type: string
          format: date
          description: The start_date property of the entity (date)
          example: '2024-01-15'
          nullable: true
        end_date:
          type: string
          format: date
          description: The end_date property of the entity (date)
          example: '2024-01-15'
          nullable: true
        current:
          type: boolean
          description: The current property of the entity (boolean)
          example: true
          nullable: true
        stack:
          type: string
          description: The stack property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        highlights:
          type: string
          description: The highlights property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
    CreateUpdateExperienceGroupDto:
      type: object
      description: CreateUpdateExperienceGroupDto entity schema
      properties:
        name:
          type: string
          description: The name property of the entity (string)
          example: This is a simple string example.
          nullable: true
        description:
          type: string
          description: The description property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
    CreateUpdateExperienceDto:
      type: object
      description: CreateUpdateExperienceDto entity schema
      properties:
        company:
          type: string
          description: The company property of the entity (string)
          example: This is a simple string example.
          nullable: true
        title:
          type: string
          description: The title property of the entity (string)
          example: This is a simple string example.
          nullable: true
        start_date:
          type: string
          format: date
          description: The start_date property of the entity (date)
          example: '2024-01-15'
          nullable: true
        end_date:
          type: string
          format: date
          description: The end_date property of the entity (date)
          example: '2024-01-15'
          nullable: true
        current:
          type: boolean
          description: The current property of the entity (boolean)
          example: true
          nullable: true
        description:
          type: string
          description: The description property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        skills:
          type: string
          description: The skills property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        groupId:
          type: string
          description: ID of the groupId entity
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    CreateUpdateHomePageDto:
      type: object
      description: CreateUpdateHomePageDto entity schema
      properties:
        languages:
          type: string
          description: The languages property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        frameworks:
          type: string
          description: The frameworks property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        databases:
          type: string
          description: The databases property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        devops:
          type: string
          description: The devops property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
    Paginator:
      type: object
      description: >-
        A paginated response object, containing an array of data and pagination
        information.
      properties:
        data:
          type: array
          items:
            type: object
        currentPage:
          type: integer
          example: 1
        lastPage:
          type: integer
          example: 20
        from:
          type: integer
          example: 1
        to:
          type: integer
          example: 10
        total:
          type: integer
          example: 200
        perPage:
          type: integer
          example: 10
      required:
        - data
        - currentPage
        - lastPage
        - from
        - to
        - total
        - perPage
    SelectOption:
      type: object
      description: >-
        A small object representing a selectable option. Useful for dropdowns in
        admin panels.
      properties:
        id:
          type: number
        label:
          type: string
      required:
        - id
        - label
    AppManifest:
      type: object
      description: >-
        The manifest of the application, containing metadata and entities. Gives
        an overview of the application structure.
      properties:
        name:
          type: string
        entities:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EntityManifest'
    EntityManifest:
      type: object
      description: >-
        The manifest of an entity, containing its properties and relationships.
        Provides a detailed structure of the entity.
      properties:
        className:
          type: string
        nameSingular:
          type: string
        namePlural:
          type: string
        slug:
          type: string
        mainProp:
          type: string
        seedCount:
          type: number
        belongsTo:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipManifest'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyManifest'
      required:
        - className
        - nameSingular
        - namePlural
        - slug
        - mainProp
        - seedCount
    RelationshipManifest:
      type: object
      description: >-
        The manifest of a relationship between entities, describing how they are
        connected.
      properties:
        name:
          type: string
        entity:
          type: string
        eager:
          type: boolean
      required:
        - name
        - entity
    PropertyManifest:
      type: object
      description: >-
        The manifest of a property of an entity, describing its type and
        characteristics.
      properties:
        name:
          type: string
        type:
          type: string
      required:
        - name
        - type
  securitySchemes:
    Admin:
      type: http
      scheme: bearer
      name: Admin auth
      bearerFormat: JWT
      description: >-
        Authentication for Admin entity. Use POST /auth/admins/login to get a
        token.
